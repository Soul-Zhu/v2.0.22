var z=Object.defineProperty;var f=(s,e,i)=>e in s?z(s,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):s[e]=i;var t=(s,e,i)=>f(s,typeof e!="symbol"?e+"":e,i);import{YZField as m}from"./YZField-BrGIt1oP.js";import"./main-BnXXyOo5.js";class r extends m{constructor(i){super(i);t(this,"fileTypes");t(this,"fileSizeLimit");t(this,"fileSize");t(this,"sizeUnit");t(this,"typesDesc");t(this,"maxLimit");this.fileTypes=i.options.fileTypes||"",this.fileSizeLimit=i.options.fileSizeLimit;const{sizeValue:o,sizeUnit:n}=this.splitFileSize(i.options.fileSizeLimit);this.fileSize=o,this.sizeUnit=n,this.typesDesc=i.options.typesDesc,this.maxLimit=i.options.maxNum==0?"Infinity":i.options.maxNum}splitFileSize(i){const o=i.trim().match(/^(\d+(\.\d+)?)([A-Za-z]+)$/);if(o){const n=o[1],l=o[3];return{sizeValue:n,sizeUnit:l}}else throw new Error("Invalid file size format")}}export{r as YZAttachmentConfig};
